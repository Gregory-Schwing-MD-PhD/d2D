// compile with
// gcc  predictor.c   -L/opt/local/lib -lgsl -lgslcblas -lm -I/opt/local/include -O9 -m64 -Wall -o pred.x
 
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <gsl/gsl_randist.h>

#define MAXLENGTH 1000

enum {
  A, C, D, E, F, G, H, I, K, L, M, N, P, Q, R, S, T, V, W, Y, X, Z, NR
};
enum {
  CA, CB, CO, HN, HA, NH, NSHIFT
};

//int do_alpha(int ashift, double ecs[MAXLENGTH], double tcs[MAXLENGTH], double ncs[MAXLENGTH], double ccs[MAXLENGTH], char seq[MAXLENGTH], int nseq[MAXLENGTH], int sql)
int do_alpha(int ashift, double ecs[MAXLENGTH], double tcs[MAXLENGTH], char seq[MAXLENGTH], int nseq[MAXLENGTH], int sql)
{
  char n1[25], n2[25], n3[25], n4[25], n5[25], n6[25], *format;
  double mean[21];
//double nmean[21], cmean[21];
  double s1[21][21], d3[21][21], d1[21][21], d2[21][21], d4[21][21];
  double as1, ad3, ad1, ad2, ad4;
  int    i, err, count;
  FILE   *m=NULL, *uno, *due, *tre, *qua, *cin, *par;

  switch(ashift)
  {
    case CA: strcpy(n1,"helix-db/CA-uno.dat"); strcpy(n2,"helix-db/CA-due.dat"); strcpy(n3,"helix-db/CA-tre.dat"); strcpy(n4,"helix-db/CA-quattro.dat"); strcpy(n6,"helix-db/CA-parm.dat"); strcpy(n5,"helix-db/CA-cin.dat"); break;
    case CB: strcpy(n1,"helix-db/CB-uno.dat"); strcpy(n2,"helix-db/CB-due.dat"); strcpy(n3,"helix-db/CB-tre.dat"); strcpy(n4,"helix-db/CB-quattro.dat"); strcpy(n6,"helix-db/CB-parm.dat"); strcpy(n5,"helix-db/CB-cin.dat"); break;
    case CO: strcpy(n1,"helix-db/CO-uno.dat"); strcpy(n2,"helix-db/CO-due.dat"); strcpy(n3,"helix-db/CO-tre.dat"); strcpy(n4,"helix-db/CO-quattro.dat"); strcpy(n6,"helix-db/CO-parm.dat"); strcpy(n5,"helix-db/CO-cin.dat"); break;
    case HN: strcpy(n1,"helix-db/HN-uno.dat"); strcpy(n2,"helix-db/HN-due.dat"); strcpy(n3,"helix-db/HN-tre.dat"); strcpy(n4,"helix-db/HN-quattro.dat"); strcpy(n6,"helix-db/HN-parm.dat"); strcpy(n5,"helix-db/HN-cin.dat"); break;
    case HA: strcpy(n1,"helix-db/HA-uno.dat"); strcpy(n2,"helix-db/HA-due.dat"); strcpy(n3,"helix-db/HA-tre.dat"); strcpy(n4,"helix-db/HA-quattro.dat"); strcpy(n6,"helix-db/HA-parm.dat"); strcpy(n5,"helix-db/HA-cin.dat"); break;
    case NH: strcpy(n1,"helix-db/NH-uno.dat"); strcpy(n2,"helix-db/NH-due.dat"); strcpy(n3,"helix-db/NH-tre.dat"); strcpy(n4,"helix-db/NH-quattro.dat"); strcpy(n6,"helix-db/NH-parm.dat"); strcpy(n5,"helix-db/NH-cin.dat"); break;
  }
  uno = fopen(n1,"r");
  due = fopen(n2,"r");
  tre = fopen(n3,"r");
  qua = fopen(n4,"r");
  cin = fopen(n5,"r");
  par = fopen(n6,"r");

  switch(ashift)
  {
    case CA: m = fopen("helix-db/cs-ca-medi.dat","r"); break;
    case CB: m = fopen("helix-db/cs-cb-medi.dat","r"); break;
    case CO: m = fopen("helix-db/cs-co-medi.dat","r"); break;
    case HN: m = fopen("helix-db/cs-hn-medi.dat","r"); break;
    case HA: m = fopen("helix-db/cs-ha-medi.dat","r"); break;
    case NH: m = fopen("helix-db/cs-n-medi.dat","r"); break;
  }

  err = fscanf(uno, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(due, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(tre, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(qua, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(cin, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
 
  format = "%*s %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf";
  for(i=0;i<21;i++)
  {
//    err = fscanf(m, "%*s %lf %lf %lf ", &mean[i], &nmean[i], &cmean[i]);
    err = fscanf(m, "%*s %lf ", &mean[i]);

    err = fscanf(uno, format, &s1[i][0], &s1[i][1], &s1[i][2], &s1[i][3], &s1[i][4], &s1[i][5], &s1[i][6], &s1[i][7], &s1[i][8], &s1[i][9], &s1[i][10], &s1[i][11], &s1[i][12], &s1[i][13], &s1[i][14], &s1[i][15], &s1[i][16], &s1[i][17], &s1[i][18], &s1[i][19], &s1[i][20]);

    err = fscanf(due, format, &d1[i][0], &d1[i][1], &d1[i][2], &d1[i][3], &d1[i][4], &d1[i][5], &d1[i][6], &d1[i][7], &d1[i][8], &d1[i][9], &d1[i][10], &d1[i][11], &d1[i][12], &d1[i][13], &d1[i][14], &d1[i][15], &d1[i][16], &d1[i][17], &d1[i][18], &d1[i][19], &d1[i][20]);

    err = fscanf(tre, format, &d2[i][0], &d2[i][1], &d2[i][2], &d2[i][3], &d2[i][4], &d2[i][5], &d2[i][6], &d2[i][7], &d2[i][8], &d2[i][9], &d2[i][10], &d2[i][11], &d2[i][12], &d2[i][13], &d2[i][14], &d2[i][15], &d2[i][16], &d2[i][17], &d2[i][18], &d2[i][19], &d2[i][20]);

    err = fscanf(qua, format, &d3[i][0], &d3[i][1], &d3[i][2], &d3[i][3], &d3[i][4], &d3[i][5], &d3[i][6], &d3[i][7], &d3[i][8], &d3[i][9], &d3[i][10], &d3[i][11], &d3[i][12], &d3[i][13], &d3[i][14], &d3[i][15], &d3[i][16], &d3[i][17], &d3[i][18], &d3[i][19], &d3[i][20]);

    err = fscanf(cin, format, &d4[i][0], &d4[i][1], &d4[i][2], &d4[i][3], &d4[i][4], &d4[i][5], &d4[i][6], &d4[i][7], &d4[i][8], &d4[i][9], &d4[i][10], &d4[i][11], &d4[i][12], &d4[i][13], &d4[i][14], &d4[i][15], &d4[i][16], &d4[i][17], &d4[i][18], &d4[i][19], &d4[i][20]);
  }

  fclose(m);
  fclose(uno);
  fclose(due);
  fclose(tre);
  fclose(qua);
  fclose(cin);

  err = fscanf(par, "%lf", &as1);
  err = fscanf(par, "%lf", &ad1);
  err = fscanf(par, "%lf", &ad2);
  err = fscanf(par, "%lf", &ad3);
  err = fscanf(par, "%lf", &ad4);
  
  fclose(par);

  count=0;
  for(i=0;i<sql;i++)
  {
    if(nseq[i]==G&&(ashift==HA||ashift==CB)) continue;
    if(nseq[i]==P&&(ashift==HN||ashift==NH)) continue;

    tcs[i] = mean[nseq[i]]; 
//    ccs[i] = cmean[nseq[i]]; 
//    ncs[i] = nmean[nseq[i]]; 

    if(i>0) { tcs[i] += as1*s1[nseq[i-1]][nseq[i]];} //ccs[i] += as1*s1[nseq[i-1]][nseq[i]];}
    if(i<(strlen(seq)-1)) { tcs[i] += ad1*d1[nseq[i+1]][nseq[i]];} //ncs[i] += ad1*d1[nseq[i+1]][nseq[i]];}
    if(i<(strlen(seq)-2)) { tcs[i] += ad2*d2[nseq[i+2]][nseq[i]];} //ncs[i] += ad2*d2[nseq[i+2]][nseq[i]];}
    if(i<(strlen(seq)-3)) { tcs[i] += ad3*d3[nseq[i+3]][nseq[i]];} //ncs[i] += ad3*d3[nseq[i+3]][nseq[i]];}
    if(i<(strlen(seq)-4)) { tcs[i] += ad4*d4[nseq[i+4]][nseq[i]];} //ncs[i] += ad4*d4[nseq[i+4]][nseq[i]];}
  }

  return 0;
}

int do_beta(int ashift, double ecs[MAXLENGTH], double tcs[MAXLENGTH], char seq[MAXLENGTH], int nseq[MAXLENGTH], int sql)
{
  char   n1[25], n2[25], n3[25], n4[25], n5[25], *format;
  double mean[21];
  double s1[21][21], s2[21][21], d1[21][21], d2[21][21];
  double as1, as2, ad1, ad2;
  int    i, err, count;
  FILE   *m=NULL, *uno, *due, *tre, *qua, *par;

  switch(ashift)
  {
    case CA: strcpy(n1,"beta-db/CA-uno.dat"); strcpy(n2,"beta-db/CA-due.dat"); strcpy(n3,"beta-db/CA-tre.dat"); strcpy(n4,"beta-db/CA-quattro.dat"); strcpy(n5,"beta-db/CA-parm.dat"); break;
    case CB: strcpy(n1,"beta-db/CB-uno.dat"); strcpy(n2,"beta-db/CB-due.dat"); strcpy(n3,"beta-db/CB-tre.dat"); strcpy(n4,"beta-db/CB-quattro.dat"); strcpy(n5,"beta-db/CB-parm.dat"); break;
    case CO: strcpy(n1,"beta-db/CO-uno.dat"); strcpy(n2,"beta-db/CO-due.dat"); strcpy(n3,"beta-db/CO-tre.dat"); strcpy(n4,"beta-db/CO-quattro.dat"); strcpy(n5,"beta-db/CO-parm.dat"); break;
    case HN: strcpy(n1,"beta-db/HN-uno.dat"); strcpy(n2,"beta-db/HN-due.dat"); strcpy(n3,"beta-db/HN-tre.dat"); strcpy(n4,"beta-db/HN-quattro.dat"); strcpy(n5,"beta-db/HN-parm.dat"); break;
    case HA: strcpy(n1,"beta-db/HA-uno.dat"); strcpy(n2,"beta-db/HA-due.dat"); strcpy(n3,"beta-db/HA-tre.dat"); strcpy(n4,"beta-db/HA-quattro.dat"); strcpy(n5,"beta-db/HA-parm.dat"); break;
    case NH: strcpy(n1,"beta-db/NH-uno.dat"); strcpy(n2,"beta-db/NH-due.dat"); strcpy(n3,"beta-db/NH-tre.dat"); strcpy(n4,"beta-db/NH-quattro.dat"); strcpy(n5,"beta-db/NH-parm.dat"); break;
  }
  uno = fopen(n1,"r");
  due = fopen(n2,"r");
  tre = fopen(n3,"r");
  qua = fopen(n4,"r");
  par = fopen(n5,"r");

  switch(ashift)
  {
    case CA: m = fopen("beta-db/cs-ca-medi.dat","r"); break;
    case CB: m = fopen("beta-db/cs-cb-medi.dat","r"); break;
    case CO: m = fopen("beta-db/cs-co-medi.dat","r"); break;
    case HN: m = fopen("beta-db/cs-hn-medi.dat","r"); break;
    case HA: m = fopen("beta-db/cs-ha-medi.dat","r"); break;
    case NH: m = fopen("beta-db/cs-n-medi.dat","r"); break;
  }

  err = fscanf(uno, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(due, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(tre, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(qua, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
 
  format = "%*s %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf";
  for(i=0;i<21;i++)
  {
    err = fscanf(m, "%*s %lf %*f", &mean[i]);

    err = fscanf(uno, format, &s1[i][0], &s1[i][1], &s1[i][2], &s1[i][3], &s1[i][4], &s1[i][5], &s1[i][6], &s1[i][7], &s1[i][8], &s1[i][9], &s1[i][10], &s1[i][11], &s1[i][12], &s1[i][13], &s1[i][14], &s1[i][15], &s1[i][16], &s1[i][17], &s1[i][18], &s1[i][19], &s1[i][20]);

    err = fscanf(due, format, &s2[i][0], &s2[i][1], &s2[i][2], &s2[i][3], &s2[i][4], &s2[i][5], &s2[i][6], &s2[i][7], &s2[i][8], &s2[i][9], &s2[i][10], &s2[i][11], &s2[i][12], &s2[i][13], &s2[i][14], &s2[i][15], &s2[i][16], &s2[i][17], &s2[i][18], &s2[i][19], &s2[i][20]);

    err = fscanf(tre, format, &d1[i][0], &d1[i][1], &d1[i][2], &d1[i][3], &d1[i][4], &d1[i][5], &d1[i][6], &d1[i][7], &d1[i][8], &d1[i][9], &d1[i][10], &d1[i][11], &d1[i][12], &d1[i][13], &d1[i][14], &d1[i][15], &d1[i][16], &d1[i][17], &d1[i][18], &d1[i][19], &d1[i][20]);

    err = fscanf(qua, format, &d2[i][0], &d2[i][1], &d2[i][2], &d2[i][3], &d2[i][4], &d2[i][5], &d2[i][6], &d2[i][7], &d2[i][8], &d2[i][9], &d2[i][10], &d2[i][11], &d2[i][12], &d2[i][13], &d2[i][14], &d2[i][15], &d2[i][16], &d2[i][17], &d2[i][18], &d2[i][19], &d2[i][20]);
  }

  fclose(m);
  fclose(uno);
  fclose(due);
  fclose(tre);
  fclose(qua);

  err = fscanf(par, "%lf", &as1);
  err = fscanf(par, "%lf", &as2);
  err = fscanf(par, "%lf", &ad1);
  err = fscanf(par, "%lf", &ad2);
  
  fclose(par);

  count=0;
  for(i=0;i<sql;i++)
  {
    if(nseq[i]==G&&(ashift==HA||ashift==CB)) continue;
    if(nseq[i]==P&&(ashift==HN||ashift==NH)) continue;

    tcs[i] = mean[nseq[i]]; 

    if(i>1) { tcs[i] += as2*s2[nseq[i-2]][nseq[i]]; }
    if(i>0) { tcs[i] += as1*s1[nseq[i-1]][nseq[i]]; }
    if(i<(strlen(seq)-1)) {tcs[i] += ad1*d1[nseq[i+1]][nseq[i]]; }
    if(i<(strlen(seq)-2)) {tcs[i] += ad2*d2[nseq[i+2]][nseq[i]]; }
  }

  return 0;
}

int do_coil(int ashift, double ecs[MAXLENGTH], double tcs[MAXLENGTH], char seq[MAXLENGTH], int nseq[MAXLENGTH], int sql)
{
  char n1[25], n2[25], n3[25], n4[25], n5[25];
  char   *format;
  double mean[21];
  double s1[21][21], s2[21][21], d1[21][21], d2[21][21];
  double as1, as2, ad1, ad2;
  int  i, err, count;
  FILE *m=NULL, *uno, *due, *tre, *qua, *par;

  switch(ashift)
  {
    case CA: strcpy(n1,"coil-db/CA-uno.dat"); strcpy(n2,"coil-db/CA-due.dat"); strcpy(n3,"coil-db/CA-tre.dat"); strcpy(n4,"coil-db/CA-quattro.dat"); strcpy(n5,"coil-db/CA-parm.dat"); break;
    case CB: strcpy(n1,"coil-db/CB-uno.dat"); strcpy(n2,"coil-db/CB-due.dat"); strcpy(n3,"coil-db/CB-tre.dat"); strcpy(n4,"coil-db/CB-quattro.dat"); strcpy(n5,"coil-db/CB-parm.dat"); break;
    case CO: strcpy(n1,"coil-db/CO-uno.dat"); strcpy(n2,"coil-db/CO-due.dat"); strcpy(n3,"coil-db/CO-tre.dat"); strcpy(n4,"coil-db/CO-quattro.dat"); strcpy(n5,"coil-db/CO-parm.dat"); break;
    case HN: strcpy(n1,"coil-db/HN-uno.dat"); strcpy(n2,"coil-db/HN-due.dat"); strcpy(n3,"coil-db/HN-tre.dat"); strcpy(n4,"coil-db/HN-quattro.dat"); strcpy(n5,"coil-db/HN-parm.dat"); break;
    case HA: strcpy(n1,"coil-db/HA-uno.dat"); strcpy(n2,"coil-db/HA-due.dat"); strcpy(n3,"coil-db/HA-tre.dat"); strcpy(n4,"coil-db/HA-quattro.dat"); strcpy(n5,"coil-db/HA-parm.dat"); break;
    case NH: strcpy(n1,"coil-db/NH-uno.dat"); strcpy(n2,"coil-db/NH-due.dat"); strcpy(n3,"coil-db/NH-tre.dat"); strcpy(n4,"coil-db/NH-quattro.dat"); strcpy(n5,"coil-db/NH-parm.dat"); break;
  }
  uno = fopen(n1,"r");
  due = fopen(n2,"r");
  tre = fopen(n3,"r");
  qua = fopen(n4,"r");
  par = fopen(n5,"r");

  switch(ashift)
  {
    case CA: m = fopen("coil-db/cs-ca-medi.dat","r"); break;
    case CB: m = fopen("coil-db/cs-cb-medi.dat","r"); break;
    case CO: m = fopen("coil-db/cs-co-medi.dat","r"); break;
    case HN: m = fopen("coil-db/cs-hn-medi.dat","r"); break;
    case HA: m = fopen("coil-db/cs-ha-medi.dat","r"); break;
    case NH: m = fopen("coil-db/cs-n-medi.dat","r"); break;
  }

  err = fscanf(uno, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(due, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(tre, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
  err = fscanf(qua, "%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s");
 
  format = "%*s %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf";
  for(i=0;i<21;i++)
  {
    err = fscanf(m, "%*s %lf ", &mean[i]);

    err = fscanf(uno, format, &s1[i][0], &s1[i][1], &s1[i][2], &s1[i][3], &s1[i][4], &s1[i][5], &s1[i][6], &s1[i][7], &s1[i][8], &s1[i][9], &s1[i][10], &s1[i][11], &s1[i][12], &s1[i][13], &s1[i][14], &s1[i][15], &s1[i][16], &s1[i][17], &s1[i][18], &s1[i][19], &s1[i][20]);

    err = fscanf(due, format, &s2[i][0], &s2[i][1], &s2[i][2], &s2[i][3], &s2[i][4], &s2[i][5], &s2[i][6], &s2[i][7], &s2[i][8], &s2[i][9], &s2[i][10], &s2[i][11], &s2[i][12], &s2[i][13], &s2[i][14], &s2[i][15], &s2[i][16], &s2[i][17], &s2[i][18], &s2[i][19], &s2[i][20]);

    err = fscanf(tre, format, &d1[i][0], &d1[i][1], &d1[i][2], &d1[i][3], &d1[i][4], &d1[i][5], &d1[i][6], &d1[i][7], &d1[i][8], &d1[i][9], &d1[i][10], &d1[i][11], &d1[i][12], &d1[i][13], &d1[i][14], &d1[i][15], &d1[i][16], &d1[i][17], &d1[i][18], &d1[i][19], &d1[i][20]);

    err = fscanf(qua, format, &d2[i][0], &d2[i][1], &d2[i][2], &d2[i][3], &d2[i][4], &d2[i][5], &d2[i][6], &d2[i][7], &d2[i][8], &d2[i][9], &d2[i][10], &d2[i][11], &d2[i][12], &d2[i][13], &d2[i][14], &d2[i][15], &d2[i][16], &d2[i][17], &d2[i][18], &d2[i][19], &d2[i][20]);
  }

  fclose(m);
  fclose(uno);
  fclose(due);
  fclose(tre);
  fclose(qua);

  err = fscanf(par, "%lf", &as1);
  err = fscanf(par, "%lf", &as2);
  err = fscanf(par, "%lf", &ad1);
  err = fscanf(par, "%lf", &ad2);
  
  fclose(par);

  count=0;
  for(i=0;i<sql;i++)
  {
    if(nseq[i]==G&&(ashift==HA||ashift==CB)) continue;
    if(nseq[i]==P&&(ashift==HN||ashift==NH)) continue;

    tcs[i] = mean[nseq[i]]; 

    if(i>1&&nseq[i-2]!=Z&&nseq[i-1]!=Z) tcs[i] += as2*s2[nseq[i-2]][nseq[i]];
    if(i>0&&nseq[i-1]!=Z) tcs[i] += as1*s1[nseq[i-1]][nseq[i]];
    if(i<(strlen(seq)-1)&&nseq[i+1]!=Z) tcs[i] += ad1*d1[nseq[i+1]][nseq[i]];
    if(i<(strlen(seq)-2)&&nseq[i+2]!=Z&&nseq[i+1]!=Z) tcs[i] += ad2*d2[nseq[i+2]][nseq[i]];
  }

  return 0;
}

int do_predict(int ashift, char *bmrb)
{
  int    i, j, sql=0, nseq[MAXLENGTH], result, err, MAX;
  int    start, end; 
  FILE   *ref, *tab, *pred;
  double ecs[MAXLENGTH], alphacs[MAXLENGTH], betacs[MAXLENGTH], coilcs[MAXLENGTH];
//  double calphacs[MAXLENGTH], nalphacs[MAXLENGTH];
  double sigma[3], Aprob[MAXLENGTH][NSHIFT], Bprob[MAXLENGTH][NSHIFT], Cprob[MAXLENGTH][NSHIFT];
  double pp[MAXLENGTH][3], spp[MAXLENGTH][3], npp[MAXLENGTH][3], norm, maxi, intp[MAXLENGTH][3], prec;
  char   seq[MAXLENGTH], n7[25], *format=NULL, ss[MAXLENGTH], css[MAXLENGTH];

  fprintf(stderr, "Begin!\n"); fflush(stderr);

  if(ashift==NSHIFT) {start=0; end=NH; strcpy(n7,"SS-results.dat");}
  else {
    start = ashift; 
    end = ashift;
    switch(ashift)
    {
      case CA: strcpy(n7,"SS-ca.dat"); break;
      case CB: strcpy(n7,"SS-cb.dat"); break;
      case CO: strcpy(n7,"SS-co.dat"); break;
      case HN: strcpy(n7,"SS-hn.dat"); break;
      case HA: strcpy(n7,"SS-ha.dat"); break;
      case NH: strcpy(n7,"SS-nh.dat"); break;
    }
  }

  for(ashift=start;ashift<(end+1);ashift++)
  {
    tab = fopen("other-db/tab.err","r");
    if (tab==NULL) {fprintf(stderr, "other-db/tab.err file not found!\n"); return 1;}
    err = fscanf(tab, "%*s %*s %*s %*s");
    for(i=0;i<NSHIFT;i++)
    {
      if(i==ashift) err = fscanf(tab, "%*s %lf %lf %lf", &sigma[0], &sigma[1], &sigma[2]);
      else err = fscanf(tab, "%*s %*f %*f %*f");
    }
    fclose(tab);

    switch(ashift)
    {
      case CA: format = "%*i %*i %c %*c %c %lf %*lf %*lf %*lf %*lf %*lf"; break;
      case CB: format = "%*i %*i %c %*c %c %*lf %lf %*lf %*lf %*lf %*lf"; break;
      case CO: format = "%*i %*i %c %*c %c %*lf %*lf %lf %*lf %*lf %*lf"; break;
      case HN: format = "%*i %*i %c %*c %c %*lf %*lf %*lf %lf %*lf %*lf"; break;
      case HA: format = "%*i %*i %c %*c %c %*lf %*lf %*lf %*lf %lf %*lf"; break;
      case NH: format = "%*i %*i %c %*c %c %*lf %*lf %*lf %*lf %*lf %lf"; break;
    }

    ref = fopen(bmrb,"r");
    if (ref==NULL) {fprintf(stderr, "%s file not found!\n", bmrb); return 1;}

    sql=0;
    while(1)
    {
      err = fscanf(ref, format, &seq[sql], &css[sql], &ecs[sql]);
      if(err==EOF) break;
      sql++;
    }
    fclose(ref);
    if(ashift==start) fprintf(stderr,"Protein length is %i. Last residue is %c\n", sql, seq[sql-1]); fflush(stderr);

    for(i=0;i<sql;i++) {
      switch(seq[i]) 
      {
        case 'A': nseq[i] = A; break;
        case 'C': nseq[i] = C; break;
        case 'D': nseq[i] = D; break;
        case 'E': nseq[i] = E; break;
        case 'F': nseq[i] = F; break;
        case 'G': nseq[i] = G; break;
        case 'H': nseq[i] = H; break;
        case 'I': nseq[i] = I; break;
        case 'K': nseq[i] = K; break;
        case 'L': nseq[i] = L; break;
        case 'M': nseq[i] = M; break;
        case 'N': nseq[i] = N; break;
        case 'O': nseq[i] = P; break;
        case 'P': nseq[i] = P; break;
        case 'Q': nseq[i] = Q; break;
        case 'R': nseq[i] = R; break;
        case 'S': nseq[i] = S; break;
        case 'T': nseq[i] = T; break;
        case 'V': nseq[i] = V; break;
        case 'W': nseq[i] = W; break;
        case 'Y': nseq[i] = Y; break;
        case 'X': nseq[i] = X; break;
        case 'Z': nseq[i] = Z; break;
        default: fprintf(stderr, "ERROR: AminoAcids %c not recognized! line %d\n", seq[i], i); return 1; break;
      }
    }

    //result = do_alpha(ashift, ecs, alphacs, nalphacs, calphacs, seq, nseq, sql);
    result = do_alpha(ashift, ecs, alphacs, seq, nseq, sql);
    result = do_beta(ashift, ecs, betacs, seq, nseq, sql);
    result = do_coil(ashift, ecs, coilcs, seq, nseq, sql);

    for(i=0;i<sql;i++) 
    {
      if(ecs[i]<900&&(fabs(ecs[i]-alphacs[i])<3.*sigma[0]||fabs(ecs[i]-betacs[i])<3.*sigma[1]||fabs(ecs[i]-coilcs[i])<3.*sigma[2])) {
        Aprob[i][ashift] = 1./(sigma[0]*sqrt(2.*M_PI))*exp(-(ecs[i]-alphacs[i])*(ecs[i]-alphacs[i])/(2.*sigma[0]*sigma[0]));
        Bprob[i][ashift] = 1./(sigma[1]*sqrt(2.*M_PI))*exp(-(ecs[i]-betacs[i])*(ecs[i]-betacs[i])/(2.*sigma[1]*sigma[1]));
        Cprob[i][ashift] = 1./(sigma[2]*sqrt(2.*M_PI))*exp(-(ecs[i]-coilcs[i])*(ecs[i]-coilcs[i])/(2.*sigma[2]*sigma[2]));
      } else {
        Aprob[i][ashift] = 999.;
        Bprob[i][ashift] = 999.;
        Cprob[i][ashift] = 999.;
      }
    }

  }

  tab = fopen("fasta","w");
  for(i=0;i<sql;i++) {
    if(seq[i]!='O'&&seq[i]!='X') fprintf(tab, "%c", seq[i]);
    else if(seq[i]=='O') fprintf(tab, "%c", 'P');
    else if(seq[i]=='X') fprintf(tab, "%c", 'C');
  }
  fprintf(tab,"\n"); 
  fclose(tab);
  err = system("./runpsipred_single fasta > /dev/null 2> /dev/null");
  if(err!=0) {fprintf(stderr, "PSIPRED exit with error %d\n", err); exit(1);}

  tab = fopen("psipred.dat","r");

  for(i=0;i<sql;i++)
    err = fscanf(tab, "%*d %*s %*s %lf %lf %lf", &intp[i][2], &intp[i][0], &intp[i][1]);
  fclose(tab);

  pred = fopen(n7, "w"); 
  for(i=0;i<sql;i++)
  {
    pp[i][0] = pp[i][1] = pp[i][2] = 0.;
    for(j=0;j<NSHIFT;j++)
    {
       if(Aprob[i][j]<900)
       {
         pp[i][0] += log(Aprob[i][j]);
         pp[i][1] += log(Bprob[i][j]);
         pp[i][2] += log(Cprob[i][j]);
//         fprintf(stderr,"%d %d %10.3lf %10.3lf %10.3lf %10.3lf %10.3lf %10.3lf\n", i,j,Aprob[i][j], Bprob[i][j], Cprob[i][j], pp[i][0],pp[i][1],pp[i][2]); fflush(stderr);
       }
    }
    // these are the intrinsic probability per aminoacids
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) {
      norm = exp(pp[i][0])+exp(pp[i][1])+exp(pp[i][2]);
      pp[i][0] = exp(pp[i][0])/norm;
      pp[i][1] = exp(pp[i][1])/norm;
      pp[i][2] = exp(pp[i][2])/norm;
    }
  }

  fprintf(stderr,"Assigning secondary structure..."); fflush(stderr);

  for(i=0;i<sql;i++)
  {
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) {
      maxi = pp[i][0]; MAX=0;
      for(j=1;j<3;j++) 
        if( maxi < pp[i][j] ) {maxi = pp[i][j]; MAX=j;}

      switch(MAX)
      {
        case 0: strncat(ss,"H",1); break;
        case 1: strncat(ss,"E",1); break;
        case 2: strncat(ss,"C",1); break;
      }
    }
    else strncat(ss," ",1);
  }

  fprintf(stderr,"done!\n"); fflush(stderr);
  fprintf(stderr,"SS:%s ",ss); fflush(stderr);
  j=0; prec=0;
  for(i=0;i<sql;i++)
  {
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) {
      if(css[i]=='T') css[i]='C';
      if(css[i]!=ss[i]) prec++;
      j++;
    }
  }
  fprintf(stderr,"%4.1lf\n", prec/j*100.);

  for(i=0;i<sql;i++) {
    for(j=0;j<3;j++) {if(intp[i][j]<0.01) intp[i][j] = 0.01; else if(intp[i][j]>0.99) intp[i][j] = 0.99;}
    norm = intp[i][0] + intp[i][1] + intp[i][2];
    intp[i][0] /= norm;
    intp[i][1] /= norm;
    intp[i][2] /= norm;
  }
  

  for(i=0;i<sql;i++)
  {
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) {
      spp[i][0] = pp[i][0]*intp[i][0];
      spp[i][1] = pp[i][1]*intp[i][1];
      spp[i][2] = pp[i][2]*intp[i][2];
      norm = spp[i][0] + spp[i][1] + spp[i][2];
      spp[i][0] /= norm;
      spp[i][1] /= norm;
      spp[i][2] /= norm;

      maxi = spp[i][0]; MAX=0;
      for(j=1;j<3;j++) 
        if( maxi < spp[i][j] ) {maxi = spp[i][j]; MAX=j;}

      switch(MAX)
      {
        case 0: ss[i]='H'; break;
        case 1: ss[i]='E'; break;
        case 2: ss[i]='C'; break;
      } 
    }
  }
  fprintf(stderr,"SS:%s ",ss); fflush(stderr);
  j=0; prec=0;
  for(i=0;i<sql;i++)
  {
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) {
      if(css[i]!=ss[i]) prec++;
      j++;
    }
  }
  fprintf(stderr,"%4.1lf\n",prec/j*100.);

  // correction algorithms
  for(i=0;i<sql;i++)
  {
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) 
    {
      npp[i][0] = spp[i][0];
      npp[i][1] = spp[i][1];
      npp[i][2] = spp[i][2];
      if((pp[i-1][0]!=0||pp[i-1][1]!=0||pp[i-1][2]!=0)&&i>0)
      {  
        npp[i][0] *= spp[i-1][0];
        npp[i][1] *= spp[i-1][1];
        npp[i][2] *= spp[i-1][2];
      }
      if((pp[i+1][0]!=0||pp[i+1][1]!=0||pp[i+1][2]!=0)&&i<sql-1)
      {
        npp[i][0] *= spp[i+1][0];
        npp[i][1] *= spp[i+1][1];
        npp[i][2] *= spp[i+1][2];
      }
      norm = npp[i][0] + npp[i][1] + npp[i][2];
      npp[i][0] /= norm;
      npp[i][1] /= norm;
      npp[i][2] /= norm;
    }
  }

  for(i=0;i<sql;i++)
  {
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) {
      maxi = npp[i][0]; MAX=0;
      for(j=1;j<3;j++) 
        if( maxi < npp[i][j] ) {maxi = npp[i][j]; MAX=j;}

      switch(MAX)
      {
        case 0: ss[i]='H'; break;
        case 1: ss[i]='E'; break;
        case 2: ss[i]='C'; break;
      }
    }
  }
  fprintf(stderr,"SS:%s\n",ss); fflush(stderr);

  for(i=0;i<sql;i++)
  {
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) {
      fprintf(pred, "%i \t %c \t %10.3lf %10.3lf %10.3lf \t %10.3lf %10.3lf %10.3lf %c\n", i+1, seq[i], pp[i][0], pp[i][1], pp[i][2], npp[i][0], npp[i][1], npp[i][2], ss[i]);
    } else {
      fprintf(pred, "%i \t %c \t \n", i+1, seq[i]);
    }
  }
  fclose(pred);

  j=0; prec=0;
  for(i=0;i<sql;i++)
  {
    if(pp[i][0]!=0||pp[i][1]!=0||pp[i][2]!=0) {
      if(css[i]!=ss[i]) prec++;
      j++;
    }
  }
  fprintf(stderr,"SS:%s\n",css); fflush(stderr);
  fprintf(stdout,"Err %4.1lf\n", prec/j*100.);

  err = system("rm -f psipred.ss2 psipred.horiz psipred.dat fasta");
  return 0;
}

int main(int argc, char *argv[])
{
  int ashift;
  int status;

  status = 0;
  fprintf(stderr,"Arguments: %d %s %s %s\n", argc, argv[0], argv[1], argv[2]);
  if(argc!=3) 
  {
    fprintf(stderr,"pred.x must be use with 2 arguments:\n");
    fprintf(stderr,"       -{CA, CB, CO, HN, HA, NH, ALL}\n");
    fprintf(stderr,"       input file\n");
    return 1;
  }

  if(!strcmp(argv[1],"-CA")) ashift = CA;
  else if(!strcmp(argv[1],"-CB")) ashift = CB;
  else if(!strcmp(argv[1],"-CO")) ashift = CO;
  else if(!strcmp(argv[1],"-HN")) ashift = HN;
  else if(!strcmp(argv[1],"-HA")) ashift = HA;
  else if(!strcmp(argv[1],"-NH")) ashift = NH;
  else if(!strcmp(argv[1],"-ALL")) ashift = NSHIFT;
  else {fprintf(stderr, "Wrong argument: %s, expected one in (-CA, -CB, -CO, -HN, -HA, -NH or -ALL)\n", argv[1]); return 1;}

  if(argv[2]!=NULL) status = do_predict(ashift, argv[2]);
  else {fprintf(stderr, "Wrong file name: %s, expected one\n", argv[2]); return 1;}

  return status;
}  
